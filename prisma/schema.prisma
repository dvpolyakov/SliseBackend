// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Whitelist {
  id               String                @id @default(uuid())
  name             String
  contractAddress  String?
  size             Int
  chainType        ChainType             @default(ETHEREUM)
  whitelistMembers WhitelistMember[]
  createdAt        DateTime              @default(now())
  owner            User                  @relation(fields: [ownerId], references: [address])
  ownerId          String
  whitelistInfo    WhitelistInfo?
  settings         RegistrationSettings?
  whitelistLink    WhitelistLink?
  metadata         String?
}

model WhitelistInfo {
  id                  String    @id @default(uuid())
  logo                String?
  urlSlug             String?
  mintPrice           Float?
  mintDate            DateTime?
  registrationEndDate DateTime?
  url                 String?
  twitter             String?
  twitterFollowers    Int?
  discord             String?
  discordMembers      Int?
  description         String?
  whitelist           Whitelist @relation(fields: [whitelistId], references: [id])
  whitelistId         String    @unique
}

model RegistrationSettings {
  id                  String    @id @default(uuid())
  registrationActive  Boolean
  twitterVerification Boolean
  minTwitterFollowers Int
  discordVerification Boolean
  minWalletBalance    Int
  totalSize           Int
  whitelist           Whitelist @relation(fields: [whitelistId], references: [id])
  whitelistId         String    @unique
}

model WhitelistLink {
  link        String    @id
  whitelist   Whitelist @relation(fields: [whitelistId], references: [id])
  whitelistId String    @unique
}

model WhitelistMember {
  id                    String               @id @default(uuid())
  address               String
  createdAt             DateTime             @default(now())
  whitelist             Whitelist            @relation(fields: [whitelistId], references: [id])
  whitelistId           String
  tokens                Token[]
  totalTokens           Int
  tokenProcessed        Boolean              @default(true)
  tokenProcessedAttemps Int
  AccountBalance        AccountBalance[]
  WhitelistMemberInfo   WhitelistMemberInfo?
}

model WhitelistMemberInfo {
  twitter           String?
  twitterFollowers  Int?
  discord           String?
  whitelistMember   WhitelistMember @relation(fields: [whitelistMemberId], references: [id])
  whitelistMemberId String          @unique
}

model User {
  address    String      @id
  chainType  ChainType   @default(UNKNOWN)
  createdAt  DateTime    @default(now())
  whitelists Whitelist[]
}

model AccountBalance {
  id                String          @id @default(uuid())
  whitelistMember   WhitelistMember @relation(fields: [whitelistMemberId], references: [id])
  whitelistMemberId String
  tokenBalance      Float
  usdBalance        Float
  chainType         ChainType       @default(UNKNOWN)
}

model Token {
  id                String          @id @default(uuid())
  contractName      String
  contractAddress   String
  tokenType         TokenType       @default(UNKOWN)
  nftVersion        String?
  nftDescription    String          @db.Text
  balance           Int
  whitelistMember   WhitelistMember @relation(fields: [whitelistMemberId], references: [id])
  whitelistMemberId String
  items             Json            @db.JsonB
  collectionInfo    CollectionInfo?
}

model CollectionInfo {
  id                              String  @id @default(uuid())
  token                           Token   @relation(fields: [tokenId], references: [id])
  tokenId                         String  @unique
  floor_price                     Int?
  total_supply                    Int?
  mint_price                      Int?
  num_owners                      Int?
  one_day_volume                  Int?
  one_day_change                  Int?
  one_day_sales                   Int?
  one_day_average_price           Int?
  seven_day_volume                Int?
  seven_day_change                Int?
  seven_day_sales                 Int?
  seven_day_average_price         Int?
  thirty_day_volume               Int?
  thirty_day_change               Int?
  thirty_day_sales                Int?
  thirty_day_average_price        Int?
  total_volume                    Int?
  total_sales                     Int?
  total_minted                    Int?
  average_price                   Int?
  market_cap                      Int?
  floor_price_historic_one_day    Int?
  floor_price_historic_seven_day  Int?
  floor_price_historic_thirty_day Int?
  updated_date                    String?
}

enum TokenType {
  ERC20
  ERC223
  ERC721
  ERC827
  ERC1155
  UNKOWN
}

enum ChainType {
  ETHEREUM
  POLYGON
  SOLANA
  UNKNOWN
}
