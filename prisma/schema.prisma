// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Whitelist {
  id               String                @id @default(uuid())
  name             String
  contractAddress  String?
  size             Int
  chainType        ChainType             @default(ETHEREUM)
  whitelistMembers WhitelistMember[]
  createdAt        DateTime              @default(now())
  owner            User                  @relation(fields: [ownerId], references: [address])
  ownerId          String
  whitelistInfo    WhitelistInfo?
  settings         RegistrationSettings?
  whitelistLink    WhitelistLink?
  metadata         String?
}

model WhitelistInfo {
  id                  String    @id @default(uuid())
  logo                String?
  urlSlug             String?
  mintPrice           Float?
  mintDate            DateTime?
  registrationEndDate DateTime?
  url                 String?
  twitter             String?
  twitterFollowers    Int?
  discord             String?
  discordMembers      Int?
  description         String?
  whitelist           Whitelist @relation(fields: [whitelistId], references: [id])
  whitelistId         String    @unique
  createdAt           DateTime  @default(now())
}

model RegistrationSettings {
  id                  String    @id @default(uuid())
  registrationActive  Boolean
  twitterVerification Boolean
  minTwitterFollowers Int
  discordVerification Boolean
  minWalletBalance    Float
  totalSize           Int
  whitelist           Whitelist @relation(fields: [whitelistId], references: [id])
  whitelistId         String    @unique
}

model WhitelistLink {
  link        String    @id
  whitelist   Whitelist @relation(fields: [whitelistId], references: [id])
  whitelistId String    @unique
}

model WhitelistMember {
  id                    String               @id @default(uuid())
  address               String
  createdAt             DateTime             @default(now())
  whitelist             Whitelist            @relation(fields: [whitelistId], references: [id])
  whitelistId           String
  tokens                Token[]
  totalTokens           Int
  tokenProcessed        Boolean              @default(true)
  tokenProcessedAttemps Int
  AccountBalance        AccountBalance[]
  WhitelistMemberInfo   WhitelistMemberInfo?

  @@index([whitelistId], name: "idx_whitelistmember_whitelist_id")
}

model WhitelistMemberInfo {
  twitter           String?
  twitterFollowers  Int?
  discord           String?
  whitelistMember   WhitelistMember @relation(fields: [whitelistMemberId], references: [id])
  whitelistMemberId String          @unique
}

model User {
  address    String      @id
  chainType  ChainType   @default(UNKNOWN)
  createdAt  DateTime    @default(now())
  whitelists Whitelist[]
}

model AccountBalance {
  id                String          @id @default(uuid())
  whitelistMember   WhitelistMember @relation(fields: [whitelistMemberId], references: [id])
  whitelistMemberId String
  tokenBalance      Float
  usdBalance        Float
  chainType         ChainType       @default(UNKNOWN)
  createdAt         DateTime        @default(now())
}

model Token {
  id                          String          @id @default(uuid())
  contractName                String?
  contractAddress             String
  tokenType                   TokenType       @default(UNKOWN)
  nftVersion                  String?
  nftDescription              String?         @db.Text
  balance                     Int
  whitelistMember             WhitelistMember @relation(fields: [whitelistMemberId], references: [id])
  whitelistMemberId           String
  items                       Json            @db.JsonB
  logo                        String?
  totalSupply                 Float?
  floorPrice                  Float?
  total_supply                Float?
  mintPrice                   Float?
  numOwners                   Float?
  oneDayVolume                Float?
  oneDayChange                Float?
  oneDaySales                 Float?
  oneDayAveragePrice          Float?
  sevenDayVolume              Float?
  sevenDayChange              Float?
  sevenDaySales               Float?
  sevenDayAveragePrice        Float?
  thirtyDayVolume             Float?
  thirtyDayChange             Float?
  thirtyDaySales              Float?
  thirtyDayAveragePrice       Float?
  totalVolume                 Float?
  totalSales                  Float?
  totalMinted                 Float?
  averagePrice                Float?
  marketCap                   Float?
  floorPriceHistoricOneDay    Float?
  floorPriceHistoricSevenDay  Float?
  floorPriceHistoricThirtyDay Float?
  updatedDate                 String?
  createdAt                   DateTime        @default(now())

  @@index([whitelistMemberId], name: "idx_token_whitelistmember_id")
}

enum TokenType {
  ERC20
  ERC223
  ERC721
  ERC827
  ERC1155
  UNKOWN
}

enum ChainType {
  ETHEREUM
  POLYGON
  SOLANA
  UNKNOWN
}
